/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.tables;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.example.db.generated.Indexes;
import org.example.db.generated.Keys;
import org.example.db.generated.Public;
import org.example.db.generated.tables.records.PaymentP2020_01Record;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentP2020_01 extends TableImpl<PaymentP2020_01Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.payment_p2020_01</code>
     */
    public static final PaymentP2020_01 PAYMENT_P2020_01 = new PaymentP2020_01();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentP2020_01Record> getRecordType() {
        return PaymentP2020_01Record.class;
    }

    /**
     * The column <code>public.payment_p2020_01.payment_id</code>.
     */
    public final TableField<PaymentP2020_01Record, Integer> PAYMENT_ID = createField(DSL.name("payment_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.payment_p2020_01.customer_id</code>.
     */
    public final TableField<PaymentP2020_01Record, Integer> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.payment_p2020_01.staff_id</code>.
     */
    public final TableField<PaymentP2020_01Record, Integer> STAFF_ID = createField(DSL.name("staff_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.payment_p2020_01.rental_id</code>.
     */
    public final TableField<PaymentP2020_01Record, Integer> RENTAL_ID = createField(DSL.name("rental_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.payment_p2020_01.amount</code>.
     */
    public final TableField<PaymentP2020_01Record, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(5, 2).nullable(false), this, "");

    /**
     * The column <code>public.payment_p2020_01.payment_date</code>.
     */
    public final TableField<PaymentP2020_01Record, OffsetDateTime> PAYMENT_DATE = createField(DSL.name("payment_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private PaymentP2020_01(Name alias, Table<PaymentP2020_01Record> aliased) {
        this(alias, aliased, null);
    }

    private PaymentP2020_01(Name alias, Table<PaymentP2020_01Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.payment_p2020_01</code> table reference
     */
    public PaymentP2020_01(String alias) {
        this(DSL.name(alias), PAYMENT_P2020_01);
    }

    /**
     * Create an aliased <code>public.payment_p2020_01</code> table reference
     */
    public PaymentP2020_01(Name alias) {
        this(alias, PAYMENT_P2020_01);
    }

    /**
     * Create a <code>public.payment_p2020_01</code> table reference
     */
    public PaymentP2020_01() {
        this(DSL.name("payment_p2020_01"), null);
    }

    public <O extends Record> PaymentP2020_01(Table<O> child, ForeignKey<O, PaymentP2020_01Record> key) {
        super(child, key, PAYMENT_P2020_01);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_PAYMENT_P2020_01_CUSTOMER_ID, Indexes.IDX_FK_PAYMENT_P2020_01_STAFF_ID, Indexes.PAYMENT_P2020_01_CUSTOMER_ID_IDX);
    }

    @Override
    public Identity<PaymentP2020_01Record, Integer> getIdentity() {
        return (Identity<PaymentP2020_01Record, Integer>) super.getIdentity();
    }

    @Override
    public List<ForeignKey<PaymentP2020_01Record, ?>> getReferences() {
        return Arrays.asList(Keys.PAYMENT_P2020_01__PAYMENT_P2020_01_CUSTOMER_ID_FKEY, Keys.PAYMENT_P2020_01__PAYMENT_P2020_01_STAFF_ID_FKEY, Keys.PAYMENT_P2020_01__PAYMENT_P2020_01_RENTAL_ID_FKEY);
    }

    private transient Customer _customer;
    private transient Staff _staff;
    private transient Rental _rental;

    /**
     * Get the implicit join path to the <code>public.customer</code> table.
     */
    public Customer customer() {
        if (_customer == null)
            _customer = new Customer(this, Keys.PAYMENT_P2020_01__PAYMENT_P2020_01_CUSTOMER_ID_FKEY);

        return _customer;
    }

    /**
     * Get the implicit join path to the <code>public.staff</code> table.
     */
    public Staff staff() {
        if (_staff == null)
            _staff = new Staff(this, Keys.PAYMENT_P2020_01__PAYMENT_P2020_01_STAFF_ID_FKEY);

        return _staff;
    }

    /**
     * Get the implicit join path to the <code>public.rental</code> table.
     */
    public Rental rental() {
        if (_rental == null)
            _rental = new Rental(this, Keys.PAYMENT_P2020_01__PAYMENT_P2020_01_RENTAL_ID_FKEY);

        return _rental;
    }

    @Override
    public PaymentP2020_01 as(String alias) {
        return new PaymentP2020_01(DSL.name(alias), this);
    }

    @Override
    public PaymentP2020_01 as(Name alias) {
        return new PaymentP2020_01(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentP2020_01 rename(String name) {
        return new PaymentP2020_01(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentP2020_01 rename(Name name) {
        return new PaymentP2020_01(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Integer, Integer, BigDecimal, OffsetDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
