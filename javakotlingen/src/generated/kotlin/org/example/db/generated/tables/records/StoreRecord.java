/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.tables.records;


import java.time.OffsetDateTime;

import org.example.db.generated.tables.Store;
import org.example.db.generated.tables.interfaces.IStore;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoreRecord extends UpdatableRecordImpl<StoreRecord> implements Record4<Integer, Integer, Integer, OffsetDateTime>, IStore {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.store.store_id</code>.
     */
    public void setStoreId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.store.store_id</code>.
     */
    @Override
    public Integer getStoreId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.store.manager_staff_id</code>.
     */
    public void setManagerStaffId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.store.manager_staff_id</code>.
     */
    @Override
    public Integer getManagerStaffId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.store.address_id</code>.
     */
    public void setAddressId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.store.address_id</code>.
     */
    @Override
    public Integer getAddressId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.store.last_update</code>.
     */
    public void setLastUpdate(OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.store.last_update</code>.
     */
    @Override
    public OffsetDateTime getLastUpdate() {
        return (OffsetDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Integer, Integer, OffsetDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Store.STORE.STORE_ID;
    }

    @Override
    public Field<Integer> field2() {
        return Store.STORE.MANAGER_STAFF_ID;
    }

    @Override
    public Field<Integer> field3() {
        return Store.STORE.ADDRESS_ID;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return Store.STORE.LAST_UPDATE;
    }

    @Override
    public Integer component1() {
        return getStoreId();
    }

    @Override
    public Integer component2() {
        return getManagerStaffId();
    }

    @Override
    public Integer component3() {
        return getAddressId();
    }

    @Override
    public OffsetDateTime component4() {
        return getLastUpdate();
    }

    @Override
    public Integer value1() {
        return getStoreId();
    }

    @Override
    public Integer value2() {
        return getManagerStaffId();
    }

    @Override
    public Integer value3() {
        return getAddressId();
    }

    @Override
    public OffsetDateTime value4() {
        return getLastUpdate();
    }

    @Override
    public StoreRecord value1(Integer value) {
        setStoreId(value);
        return this;
    }

    @Override
    public StoreRecord value2(Integer value) {
        setManagerStaffId(value);
        return this;
    }

    @Override
    public StoreRecord value3(Integer value) {
        setAddressId(value);
        return this;
    }

    @Override
    public StoreRecord value4(OffsetDateTime value) {
        setLastUpdate(value);
        return this;
    }

    @Override
    public StoreRecord values(Integer value1, Integer value2, Integer value3, OffsetDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IStore from) {
        setStoreId(from.getStoreId());
        setManagerStaffId(from.getManagerStaffId());
        setAddressId(from.getAddressId());
        setLastUpdate(from.getLastUpdate());
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StoreRecord
     */
    public StoreRecord() {
        super(Store.STORE);
    }

    /**
     * Create a detached, initialised StoreRecord
     */
    public StoreRecord(Integer storeId, Integer managerStaffId, Integer addressId, OffsetDateTime lastUpdate) {
        super(Store.STORE);

        setStoreId(storeId);
        setManagerStaffId(managerStaffId);
        setAddressId(addressId);
        setLastUpdate(lastUpdate);
    }

    /**
     * Create a detached, initialised StoreRecord
     */
    public StoreRecord(org.example.db.generated.tables.pojos.Store value) {
        super(Store.STORE);

        if (value != null) {
            setStoreId(value.getStoreId());
            setManagerStaffId(value.getManagerStaffId());
            setAddressId(value.getAddressId());
            setLastUpdate(value.getLastUpdate());
        }
    }
}
